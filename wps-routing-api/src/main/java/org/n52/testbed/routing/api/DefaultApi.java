/*
 * Copyright 2019 52Â°North Initiative for Geospatial Open Source
 * Software GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.n52.testbed.routing.api;

import org.n52.testbed.routing.model.MediaTypes;
import org.n52.testbed.routing.model.routing.Routes;
import org.n52.testbed.routing.model.routing.Route;
import org.n52.testbed.routing.model.routing.RouteDefinition;
import org.n52.testbed.routing.model.wps.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

public interface DefaultApi {

    @GetMapping(value = "/", produces = {MediaTypes.APPLICATION_JSON})
    ResponseEntity<LandingPage> getLandingPage();

    @GetMapping(value = "/conformance", produces = {MediaTypes.APPLICATION_JSON})
    ResponseEntity<ConfClasses> getConformanceDeclaration();

    @GetMapping(value = "/processes", produces = {MediaTypes.APPLICATION_JSON})
    ResponseEntity<ProcessCollection> getProcesses();

    @GetMapping(value = "/processes/routing", produces = {MediaTypes.APPLICATION_JSON})
    ResponseEntity<ProcessOffering> getProcessDescription();

    @PostMapping(value = "/processes/routing/jobs", produces = {MediaTypes.APPLICATION_JSON}, consumes = {MediaTypes.APPLICATION_JSON})
    ResponseEntity<Void> execute(@Valid @RequestBody Execute body);

    @GetMapping(value = "/processes/routing/jobs", produces = {MediaTypes.APPLICATION_JSON})
    ResponseEntity<JobCollection> getJobList();

    @GetMapping(value = "/processes/routing/jobs/{jobId}", produces = {MediaTypes.APPLICATION_JSON})
    ResponseEntity<StatusInfo> getStatus(@PathVariable("jobId") String jobId);

    @GetMapping(value = "/processes/routing/jobs/{jobId}/result", produces = {MediaTypes.APPLICATION_JSON})
    ResponseEntity<Result> getResult(@PathVariable("jobId") String jobId);

    @PostMapping(value = "/routes", produces = {MediaTypes.APPLICATION_GEO_JSON, MediaTypes.APPLICATION_JSON}, consumes = {MediaTypes.APPLICATION_JSON})
    ResponseEntity<Route> computeRoute(@Valid @RequestBody RouteDefinition body, @Valid @RequestParam(value = "mode", required = false) Mode mode);

    @DeleteMapping(value = "/routes/{routeId}", produces = {MediaTypes.APPLICATION_JSON})
    ResponseEntity<Void> deleteRoute(@PathVariable("routeId") String routeId);

    @GetMapping(value = "/routes/{routeId}", produces = {MediaTypes.APPLICATION_GEO_JSON, MediaTypes.APPLICATION_JSON})
    ResponseEntity<Route> getRoute(@PathVariable("routeId") String routeId);

    @GetMapping(value = "/routes/{routeId}/definition", produces = {MediaTypes.APPLICATION_JSON})
    ResponseEntity<RouteDefinition> getRouteDefinition(@PathVariable("routeId") String routeId);

    @GetMapping(value = "/routes", produces = {MediaTypes.APPLICATION_JSON})
    ResponseEntity<Routes> getRoutes();
}
